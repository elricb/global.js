/**
 * Safe/Defaults variable casting and type detection
 * from: objects/Cast.js
 * dependancies: javascript 1.0
 */
var Cast={
    v:3,
    cint:function(a,b){"undefined"==typeof b&&(b=0);if("undefined"==typeof a)return b;a=parseInt(a,10);return isNaN(a)?b:a},
    cfloat:function(a,b){"undefined"==typeof b&&(b=0);if("undefined"==typeof a)return b;a=parseFloat(a,10);return isNaN(a)?b:a},
    isNumber:function(a){return"number"==typeof a||"object"==typeof a&&a&&a.constructor==Number?!0:!1},
    cobject:function(a,b){"undefined"==typeof b&&(b={});return"object"==typeof a&&a?a:b},
    isObject:function(a){return"object"==typeof a&&a?!0:!1},
    cstring:function(a, b){"undefined"==typeof b&&(b="");return"undefined"==typeof a?b:a+""},
    isString:function(a){return"string"==typeof a||"object"==typeof a&&a&&a.constructor==String?!0:!1},
    cboolean:function(a,b){"undefined"==typeof b&&(b=!1);return"undefined"==typeof a?b:!!a},
    isBoolean:function(a){return"boolean"==typeof a||"object"==typeof a&&a&&a.constructor==Boolean?!0:!1},
    cjson:function(a,b){if(!this.isObject(a)&&this.isString(a))if("undefined"!=typeof JSON)try{a=JSON.parse(a)}catch(c){a={error:c.message}}else try{a= eval("("+a+")")}catch(d){a={error:d.message}}return"undefined"!=typeof b&&"object"!=typeof a?b:this.cobject(a)},
    cjquery:function(a,b){"undefined"==typeof b&&(b=jQuery());return"undefined"!=typeof a&&a?jQuery(a):b},
    isJquery:function(a){return"object"==typeof a&&a&&a.jquery?!0:!1},
    cdate:function(a,b){"undefined"==typeof b&&(b=Date());if("undefined"==typeof a)return b;a=Date.parse(a);return isNaN(a)?b:a},
    isDate:function(a){return"object"==typeof a&&a&&a.constructor==Date?!0:!1},
    cdefault:function(a,b){"undefined"== typeof b&&(b=null);return"undefined"==typeof a?b:a},
    isFunction:function(a){return"function"==typeof a||"object"==typeof a&&a&&a.constructor==Function?!0:!1}
};